'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Popup = require('../Popup');

var _Popup2 = _interopRequireDefault(_Popup);

var _SearchPanel = require('./SearchPanel');

var _SearchPanel2 = _interopRequireDefault(_SearchPanel);

var _i18n = require('./i18n');

var _i18n2 = _interopRequireDefault(_i18n);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var Picker = function Picker(_ref) {
  var visible = _ref.visible,
      panelProps = _objectWithoutProperties(_ref, ['visible']);

  var locale = panelProps.locale;

  var fixProps = {
    confirmText: panelProps.confirmText || _i18n2.default[locale].confirmText,
    searchPlaceholder: panelProps.confirmText || _i18n2.default[locale].searchPlaceholder,
    noData: panelProps.confirmText || _i18n2.default[locale].noData
  };
  return _react2.default.createElement(_Popup2.default, {
    animationType: 'slide-left',
    stopBodyScrolling: false,
    visible: visible,
    content: _react2.default.createElement(_SearchPanel2.default, _extends({}, panelProps, fixProps))
  });
};

Picker.defaultProps = {
  visible: false,
  value: [],
  historyStamp: undefined,
  confirmText: undefined,
  onConfirm: function onConfirm() {},
  options: undefined,
  fetchUrl: '',
  fetchDataOnOpen: true,
  dataType: 'jsonp',
  beforeFetch: function beforeFetch(obj) {
    return obj;
  },
  fitResponse: function fitResponse(response) {
    return {
      content: response.content || response,
      success: response.success === undefined ? true : response.success
    };
  },
  afterFetch: function afterFetch(obj) {
    return obj;
  },
  locale: 'zh-cn',
  searchNotFoundContent: undefined,
  resultFormatter: undefined,
  formatter: function formatter(value) {
    if (value) {
      if (value.text !== undefined) {
        return value.text;
      }
      if (value.value !== undefined) {
        return value.value;
      }
    }
    return '';
  },
  phonetic: function phonetic(value) {
    return value.phonetic || [];
  },
  multiple: false,
  grouping: false,
  groupingIndicator: false,
  showSearch: true,
  searchDelay: 100,
  searchPlaceholder: undefined
};

Picker.propTypes = {
  visible: _propTypes2.default.bool,
  locale: _propTypes2.default.string,
  fetchUrl: _propTypes2.default.string,
  options: _propTypes2.default.array,
  fetchDataOnOpen: _propTypes2.default.bool,
  dataType: _propTypes2.default.string,
  beforeFetch: _propTypes2.default.func,
  fitResponse: _propTypes2.default.func,
  afterFetch: _propTypes2.default.func,
  showSearch: _propTypes2.default.bool,
  searchDelay: _propTypes2.default.number,
  formatter: _propTypes2.default.func,
  phonetic: _propTypes2.default.func,
  multiple: _propTypes2.default.bool,
  grouping: _propTypes2.default.bool,
  groupingIndicator: _propTypes2.default.bool,
  resultFormatter: _propTypes2.default.func,
  value: _propTypes2.default.array,
  historyStamp: _propTypes2.default.string,
  searchNotFoundContent: _propTypes2.default.string,
  onConfirm: _propTypes2.default.func,
  confirmText: _propTypes2.default.string,
  searchPlaceholder: _propTypes2.default.string
};

Picker.displayName = 'Picker';

exports.default = Picker;
module.exports = exports['default'];